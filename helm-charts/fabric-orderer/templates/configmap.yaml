{{/*
Copyright National Payments Corporation of India. All Rights Reserved.
SPDX-License-Identifier:  GPL-3.0
*/}}

{{- $HlfDomain     := .Values.hlf_domain | default "cluster.local" }}
{{- $Project       := .Values.project }}

apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "fabric-orderer.fullname" $ }}-common
  labels:
    {{- include "fabric-orderer.labels" $ | nindent 4 }}
    app: {{ include "fabric-orderer.fullname" $ }}
data:
  functions.sh: |
    function fabric_public_key_fetch() {

    FABRIC_CA_URL=$1
    FABRIC_TLS_CERT_FILE=$2

    while true; do
      http_response=$(curl -sL -w  "%{http_code}" "https://$FABRIC_CA_URL/cainfo" --insecure -o /dev/null)
      if [ "$http_response" -eq "200" ]; then
        echo "======== Fetching public key cert of $FABRIC_CA_URL, received HTTP response with 200. ========"
          if curl https://$FABRIC_CA_URL/cainfo --insecure | jq .result.CAChain | base64 -i -d > $FABRIC_TLS_CERT_FILE; then
            echo "======== The downloaded public key cert of $FABRIC_CA_URL ========"
            cat $FABRIC_TLS_CERT_FILE
            break;
          else
            echo "======== There are some issues with fetching the public key using 'jq' and 'curl' command. ========"
          fi
      else
        echo "======== Fetching public key cert of $FABRIC_CA_URL, but received non 200 HTTP response $http_response. Init container will retry until it gets 200 response from https://$FABRIC_CA_URL. Cannot proceed without the public key cert. ========"
        sleep {{ $.Values.retry_seconds }}
      fi
    done
    }

    function fabric_enroll() {

    FABRIC_CA_URL=$1
    FABRIC_IDENTITY=$2
    FABRIC_IDENTITY_SECRET=$3
    FABRIC_TLS_CERT_FILE=$4

    while true; do
      echo "======== Enrolling to https://$FABRIC_CA_URL as $FABRIC_IDENTITY ========"
      fabric-ca-client enroll \
            --url https://$FABRIC_IDENTITY:$FABRIC_IDENTITY_SECRET@$FABRIC_CA_URL \
            --mspdir {{ $.Values.orderer_cert_base_dir }}/msp \
            --tls.certfiles $FABRIC_TLS_CERT_FILE \
            --csr.hosts $FABRIC_IDENTITY,$FABRIC_IDENTITY.{{ $HlfDomain }} \
            --csr.names O='{{ $.Values.csr_names_o }}',L={{ $.Values.csr_names_l }},ST={{ $.Values.csr_names_st }},C={{ $.Values.csr_names_cn }}
      if [ $? -eq 0 ]; then
        echo "======== Identity is valid and enrollment is successful. ========"
        echo "======== Rearranging msp certificate directory structure for $FABRIC_IDENTITY ========"
        cp {{ $.Values.orderer_cert_base_dir }}/msp/intermediatecerts/* {{ $.Values.orderer_cert_base_dir }}/msp/intermediatecerts/ca-cert.pem
        echo "======== MSP directory has been configured successfully. ========"
        break;
      else
        echo "======== Cannot login with the given Identity, will retry in {{ $.Values.retry_seconds }} seconds. Meanwhile kindly verify the identities and endpoints ========"
        rm -rf {{ $.Values.orderer_cert_base_dir }}/msp
        sleep {{ $.Values.retry_seconds }}
      fi
    done
    }

    function get_file() {

      FILE_NAME=$1
      FILESTORE_DOWNLOAD_URL=$2
              
      while true; do
        if [ -e "$FILE_NAME" ]; then
          echo "======== File $FILE_NAME available. Proceeding to next stage. ========"
          break;
        else
          echo "======== Atempting to download $FILE_NAME from $FILESTORE_DOWNLOAD_URL ========"
          if curl --silent --head --fail "$FILESTORE_DOWNLOAD_URL" {{- if $.Values.filestore_ssl  }} --insecure {{- end }}; then
            echo "Received success http response, downloading $FILE_NAME from $FILESTORE_DOWNLOAD_URL"
            curl $FILESTORE_DOWNLOAD_URL -o $FILE_NAME {{- if $.Values.filestore_ssl  }} --insecure {{- end }}
            echo "--------------------------------------------------------"
            echo "Received file SHA256 value is = $(sha256sum $FILE_NAME)"
            echo "--------------------------------------------------------"
            break;
          else
            echo "======== Received non success http response for $FILESTORE_DOWNLOAD_URL, will retry in {{ $.Values.retry_seconds }} seconds. ========"
            sleep {{ $.Values.retry_seconds }}
          fi
        fi
      done
    }
  config.yaml: |
      NodeOUs:
        Enable: true
        ClientOUIdentifier:
          Certificate: intermediatecerts/ca-cert.pem
          OrganizationalUnitIdentifier: client
        PeerOUIdentifier:
          Certificate: intermediatecerts/ca-cert.pem
          OrganizationalUnitIdentifier: peer
        AdminOUIdentifier:
          Certificate: intermediatecerts/ca-cert.pem
          OrganizationalUnitIdentifier: admin
        OrdererOUIdentifier:
          Certificate: intermediatecerts/ca-cert.pem
          OrganizationalUnitIdentifier: orderer

{{- range .Values.orderers }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .name }}-{{ include "fabric-orderer.fullname" $ }}-conf
  labels:
    {{- include "fabric-orderer.labels" $ | nindent 4 }}
    app: {{ .name }}-{{ include "fabric-orderer.fullname" $ }}
    {{- if .additionalLabels -}}
    {{ toYaml .additionalLabels | nindent 4 }}
    {{- end }}
data:
  enroll.sh: |
    source /scripts/functions.sh

    if [ -f "{{ $.Values.orderer_cert_base_dir }}/{{ (.block_file | default $.Values.global.block_file) }}" ]; then
      echo "======== Found a blockfile at {{ $.Values.orderer_cert_base_dir }}/{{ (.block_file | default $.Values.global.block_file) }}. Will not attempt to download the blockfile from filestore. This orderer will re-use the existing blockfile present ========"
    else
      echo "======== Cound not find a blockfile at {{ $.Values.orderer_cert_base_dir }}/{{ (.block_file | default $.Values.global.block_file) }}. Proceeding to further blockfile download step from filestore ========"
      get_file {{ $.Values.orderer_cert_base_dir }}/{{ (.block_file | default $.Values.global.block_file) }} {{ $.Values.filestore_endpoint }}/{{ $Project }}/{{ (.block_file | default $.Values.global.block_file) }}
    fi


    {{- if .renew_orderer_certs }}
    echo "======== Orderer cert renewal is set to true. This will remove the existing orderer msp/tls certificates and generate new certs ========"
    rm -rf {{ $.Values.orderer_cert_base_dir }}/msp/
    rm -rf {{ $.Values.orderer_cert_base_dir }}/tls/
    echo "Cleanup finished."
    {{- end }}

    if [ -f "{{ $.Values.orderer_cert_base_dir }}/msp/signcerts/cert.pem" ]; then
      echo "======== Found a client certificate at {{ $.Values.orderer_cert_base_dir }}/msp/signcerts/cert.pem. This orderer will re-use the existing msp certificates present in the msp directory ========"
    else
      echo "======== Cound not find a client certificate at {{ $.Values.orderer_cert_base_dir }}/msp/signcerts/cert.pem. Proceeding to further msp enrollment ========"
      rm -rf {{ $.Values.orderer_cert_base_dir }}/msp
      fabric_public_key_fetch $1 $4
      fabric_enroll $1 $2 $3 $4   
    fi

    if [ -f "{{ $.Values.orderer_cert_base_dir }}/tls/signcerts/cert.pem" ]; then
      echo "======== Found a client certificate at {{ $.Values.orderer_cert_base_dir }}/tls/signcerts/cert.pem. This orderer will re-use the existing tls certificates present in the tls directory ========"
    else
      echo "======== Cound not find a client certificate at {{ $.Values.orderer_cert_base_dir }}/tls/signcerts/cert.pem. Proceeding to further tls cert archive download step from filestore ========"
      rm -rf {{ $.Values.orderer_cert_base_dir }}/tls
      get_file /var/hyperledger/tls.tar.gz {{ $.Values.filestore_endpoint }}/{{ $Project }}/{{- (.tls_cert_archive) | default "$2-tls-certs.tar.gz" }}
      echo "======== Rearranging tls certificate directory structure for $2 ========"
       if tar -xvf /var/hyperledger/tls.tar.gz -C {{ $.Values.orderer_cert_base_dir }}/; then
         echo "======== TLS directory has been configured successfully ========"
       else
         echo "======== Something went wrong, please verify the identity, make sure the tls cert for this identity is avaiable in filestore ========"
       fi
    fi
{{- end }}