{{/*
Copyright National Payments Corporation of India. All Rights Reserved.
SPDX-License-Identifier:  GPL-3.0
*/}}

{{- $HlfDomain         := .Values.hlf_domain }}
{{- $IcaEndPoint       := .Values.ca_endpoint }}
{{- $TlsCaEndpoint     := .Values.tlsca_endpoint }}
{{- $Msp_base_dir      := printf "%s%s" .Values.workdir "/crypto/users" }}
{{- $IcaTlsCertFile    := .Values.ica_tls_certfile | default "/tmp/ca-cert.pem" }}
{{- $TlsCaTlsCertFile  := .Values.tlsca_tls_certfile | default "/tmp/tlsca-cert.pem" }}

apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "fabric-tools.fullname" $ }}-fabric-ops
  labels:
    {{- include "fabric-tools.labels" $ | nindent 4 }}
data:
  config.yaml: |
      NodeOUs:
        Enable: true
        ClientOUIdentifier:
          Certificate: intermediatecerts/ca-cert.pem
          OrganizationalUnitIdentifier: client
        PeerOUIdentifier:
          Certificate: intermediatecerts/ca-cert.pem
          OrganizationalUnitIdentifier: peer
        AdminOUIdentifier:
          Certificate: intermediatecerts/ca-cert.pem
          OrganizationalUnitIdentifier: admin
        OrdererOUIdentifier:
          Certificate: intermediatecerts/ca-cert.pem
          OrganizationalUnitIdentifier: orderer
  enroll.sh: |
      enroll() {

      ica_url={{ $IcaEndPoint }}
      tlsca_url={{ $TlsCaEndpoint }}
      identity_name=$1
      identity_secret=$2
      identity_type=$3
      msp_base_dir=$4

      echo "Fetching public key cert of https://$ica_url"
      curl https://$ica_url/cainfo --insecure | jq .result.CAChain | base64 -i -d > {{ $IcaTlsCertFile }}
      echo "Enrolling as user $identity_name to https://$ica_url"
        fabric-ca-client enroll -d \
            --url https://$identity_name:$identity_secret@$ica_url \
            --mspdir $msp_base_dir/$identity_name/msp \
            --tls.certfiles {{ $IcaTlsCertFile }} \
            --csr.hosts $identity_name,$identity_name.{{ $HlfDomain }} \
            --csr.names O='{{ .Values.csr_names_o }}',L={{ .Values.csr_names_l }},ST={{ .Values.csr_names_st }},C={{ .Values.csr_names_cn }}
      echo "Re-arranging the MSP cert directory";
      cp $msp_base_dir/$identity_name/msp/intermediatecerts/* $msp_base_dir/$identity_name/msp/intermediatecerts/ca-cert.pem;
      cp /tmp/config.yaml $msp_base_dir/$identity_name/msp/config.yaml;

      if [ $identity_type = "admin" ]
        then 
        echo "No TLS enrollment is required for admin user tye, Skipping"
        else
        echo "Fetching public key cert of https://$tlsca_url"
        curl https://$tlsca_url/cainfo --insecure | jq .result.CAChain | base64 -i -d > {{ $TlsCaTlsCertFile }}
        echo "Enrolling as user $identity_name to https://$tlsca_url"
          fabric-ca-client enroll -d \
              --url https://$identity_name:$identity_secret@$tlsca_url \
              --mspdir $msp_base_dir/$identity_name/tls \
              --tls.certfiles {{ $TlsCaTlsCertFile }} \
              --csr.hosts $identity_name,$identity_name.{{ $HlfDomain }} \
              --enrollment.profile tls \
              --csr.names O='{{ .Values.csr_names_o }}',L={{ .Values.csr_names_l }},ST={{ .Values.csr_names_st }},C={{ .Values.csr_names_cn }}
        echo "Re-arranging the TLS cert directory";
        cp $msp_base_dir/$identity_name/tls/tlscacerts/* $msp_base_dir/$identity_name/tls/ca.crt;
        cp $msp_base_dir/$identity_name/tls/signcerts/* $msp_base_dir/$identity_name/tls/server.crt;
        cp $msp_base_dir/$identity_name/tls/keystore/* $msp_base_dir/$identity_name/tls/server.key;
      fi
      }
{{- range .Values.identities }}  
      enroll {{ .identity_name }} {{ .identity_secret }} {{ .identity_type }} {{ .msp_base_dir | default $Msp_base_dir }}
{{- end }}